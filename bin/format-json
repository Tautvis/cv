#!/usr/bin python2
"""Simple script to format a JSON file in-place."""


import collections
import json
import os
import re


JSON_DECODER = json.JSONDecoder(object_pairs_hook=collections.OrderedDict)


def load_json(path):
    with open(path, 'rb') as infile:
        raw_json = infile.read()
    return JSON_DECODER.decode(raw_json)


def dump_json(json_obj, indent, sep=os.linesep):
    def to_json_lines(json_obj):
        return json.dumps(json_obj, indent=indent).split(sep)

    def remove_trailing_whitespace(json_lines):
        for line in json_lines:
            yield line.rstrip()

    def add_toplevel_section_newlines(json_lines):
        def closes_toplevel_key(line):
            whitespace = r' ' * indent
            closing_tag = r'}]'
            regex = '^%s[%s],?$' % (whitespace, re.escape(closing_tag))
            return re.match(regex, line)

        for line in json_lines:
            if closes_toplevel_key(line):
                yield line + sep
            else:
                yield line

    def to_string(json_lines):
        return sep.join(json_lines) + sep

    json_lines = to_json_lines(json_obj)
    json_lines = remove_trailing_whitespace(json_lines)
    json_lines = add_toplevel_section_newlines(json_lines)
    return to_string(json_lines)


def format_json(path, indent):
    json_obj = load_json(path)
    with open(path, 'wb') as outfile:
        outfile.write(dump_json(json_obj, indent=indent))


def _aspath(fp):
    path = fp.name
    path = os.path.expanduser(path)
    path = os.path.abspath(path)
    fp.close()
    return path


def _main():
    from argparse import ArgumentParser, FileType
    parser = ArgumentParser(description=__doc__)
    parser.add_argument('infile', type=FileType('r'),
                        help='the JSON file to format')
    parser.add_argument('--indent', type=int, default=2,
                        help='number of spaces for JSON indentation')
    args = parser.parse_args()
    format_json(_aspath(args.infile), indent=args.indent)


if __name__ == '__main__':
    _main()
